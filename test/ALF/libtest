if ! which sweet>/dev/null; then
    echo "SWEET not found">&2
    exit 1
fi
if ! which llc>/dev/null; then
    echo "llc not found">&2
    exit 1
fi
function doalarm () {
    perl -e 'alarm shift; exec @ARGV' "$@";
}

if which timeout>/dev/null; then
   TIMEOUT_CMD=timeout; # timeout available
else
   TIMEOUT_CMD=doalarm
fi

function die()
{
    echo "*** ${M} FAILED (${1}) - see ${M}.log" 1>&2
#    echo "" >&2
#    echo ">>> tail ${M}.log" >&2
#    tail ${M}.log >&2
    exit 1
}

function die_expect()
{
    echo "*** ${M} FAILED [expected] (${1}) - see ${M}.log" 1>&2
#    echo "" >&2
#    echo ">>> tail ${M}.log" >&2
#    tail ${M}.log >&2
    exit 1
}

function log_timeout()
{
    if [ \( $1 -eq 124 \) -o  \( $1 -eq 142 \)  ] ; then
        echo "Timeout after ${TIMEOUT:-10} seconds" >>$M.log 2>&1
    fi
    return ${1}
}

# Influential Options
# M        ... name of the module analyzed
# ENTRY    ... name of entry function
# MERGE    ... merging strategy
# AE_FLAGS ... additional flags for abstract execution
# DOMAIN_FLAGS ... additional flags for specifing the domain
# TIMEOUT  ... timeout

SWEET=sweet

function sweet_ae()
{
    if [ "${MERGE}" == NONE ] ; then
        die "Merging strategy NONE not supported"
    fi
    if [ ! -e ${M}.alf ] ; then
        die "$M.alf does not exist"
    fi
    if [ "${DEBUG_MODE}" == "inter" ] ; then
	${SWEET} -i=${M}.alf${ALF_LIBS} func=${ENTRY:-main} \
            -do ${DOMAIN_FLAGS} -ae ffg=ub ${AE_FLAGS} vola=t merge=${MERGE:-all} \
            debug=inter -f lang=ff o=${M}.ff
    else
	(set -x; $TIMEOUT_CMD ${TIMEOUT:-10} ${SWEET} -i=${M}.alf${ALF_LIBS} func=${ENTRY:-main} \
            -do ${DOMAIN_FLAGS} -ae ffg=ub ${AE_FLAGS} vola=t merge=${MERGE:-all} \
            debug=trace -f lang=ff o=${M}.ff) >>$M.log 2>&1
	log_timeout $?
    fi
}

function sweet_css()
{
    AE_FLAGS="css ${AE_FLAGS}" sweet_ae
}

function sweet_check()
{
    if [ ! -e ${M}.alf ] ; then
        die "$M.alf does not exist"
    fi
    ${SWEET} -i=${M}.alf func=main -c >>$M.log 2>&1 
}


function check_ret_val()
{
    if [ "$#" -eq 1 ] ; then
        EXPECTED="$1"
    else
        EXPECTED="[$1..$2]"
    fi
    RESULT=$(tail -n 1 debug_msgs.txt)
    [[ "${RESULT}" =~ ".	[0] ${EXPECTED} (" ]]
}
